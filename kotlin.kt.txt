1.MainActivity.kt
.
package com.example.githubrepo

import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.githubrepo.api.GitHubApiService
import com.example.githubrepo.databinding.ActivityMainBinding
import com.example.githubrepo.model.Repository
import com.example.githubrepo.pagination.EndlessRecyclerViewScrollListener
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var adapter: RepositoryAdapter
    private lateinit var apiService: GitHubApiService
    private var currentPage = 1
    private var languageFilter: String? = null
    private var username = "google" // Default user

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setupRecyclerView()
        setupApiService()

        fetchRepositories(currentPage)

        // Handle filtering
        binding.filterButton.setOnClickListener {
            languageFilter = binding.languageFilter.text.toString()
            adapter.clearData()
            currentPage = 1
            fetchRepositories(currentPage)
        }
    }

    private fun setupRecyclerView() {
        val layoutManager = LinearLayoutManager(this)
        binding.recyclerView.layoutManager = layoutManager
        adapter = RepositoryAdapter { repository -> openRepositoryDetail(repository) }
        binding.recyclerView.adapter = adapter

        // Implement pagination
        binding.recyclerView.addOnScrollListener(object : EndlessRecyclerViewScrollListener(layoutManager) {
            override fun onLoadMore(page: Int, totalItemsCount: Int) {
                fetchRepositories(page)
            }
        })
    }

    private fun setupApiService() {
        apiService = GitHubApiService.create()
    }

    private fun fetchRepositories(page: Int) {
        apiService.getUserRepositories(username, page).enqueue(object : Callback<List<Repository>> {
            override fun onResponse(call: Call<List<Repository>>, response: Response<List<Repository>>) {
                if (response.isSuccessful && response.body() != null) {
                    val filteredRepos = if (languageFilter.isNullOrEmpty()) {
                        response.body()!!
                    } else {
                        response.body()!!.filter { it.language.equals(languageFilter, ignoreCase = true) }
                    }
                    adapter.addRepositories(filteredRepos)
                } else {
                    showError("Error fetching repositories")
                }
            }

            override fun onFailure(call: Call<List<Repository>>, t: Throwable) {
                showError("Network error")
            }
        })
    }

    private fun openRepositoryDetail(repository: Repository) {
        val intent = RepositoryDetailActivity.newIntent(this, repository)
        startActivity(intent)
    }

    private fun showError(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}
2. RepositoryAdapter.kt
package com.example.githubrepo

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.example.githubrepo.databinding.ItemRepositoryBinding
import com.example.githubrepo.model.Repository

class RepositoryAdapter(private val onClick: (Repository) -> Unit) : RecyclerView.Adapter<RepositoryAdapter.RepositoryViewHolder>() {

    private val repositories = mutableListOf<Repository>()

    fun addRepositories(newRepositories: List<Repository>) {
        repositories.addAll(newRepositories)
        notifyDataSetChanged()
    }

    fun clearData() {
        repositories.clear()
        notifyDataSetChanged()
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RepositoryViewHolder {
        val binding = ItemRepositoryBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return RepositoryViewHolder(binding)
    }

    override fun onBindViewHolder(holder: RepositoryViewHolder, position: Int) {
        val repository = repositories[position]
        holder.bind(repository)
    }

    override fun getItemCount(): Int = repositories.size

    inner class RepositoryViewHolder(private val binding: ItemRepositoryBinding) : RecyclerView.ViewHolder(binding.root) {
        fun bind(repository: Repository) {
            binding.repoName.text = repository.name
            binding.repoDescription.text = repository.description
            binding.repoLanguage.text = repository.language ?: "N/A"
            binding.repoStars.text = "Stars: ${repository.stars}"
            binding.repoForks.text = "Forks: ${repository.forks}"

            itemView.setOnClickListener { onClick(repository) }
        }
    }
}
3. Repository.kt
package com.example.githubrepo.model

import com.google.gson.annotations.SerializedName

data class Repository(
    val name: String,
    val description: String?,
    @SerializedName("stargazers_count") val stars: Int,
    @SerializedName("forks_count") val forks: Int,
    val language: String?
)
4. GitHubApiService.kt
package com.example.githubrepo.api

import com.example.githubrepo.model.Repository
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import retrofit2.http.Path
import retrofit2.http.Query

interface GitHubApiService {

    @GET("users/{username}/repos")
    fun getUserRepositories(
        @Path("username") username: String,
        @Query("page") page: Int
    ): Call<List<Repository>>

    companion object {
        private const val BASE_URL = "https://api.github.com/"

        fun create(): GitHubApiService {
            val retrofit = Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .build()
            return retrofit.create(GitHubApiService::class.java)
        }
    }
}
5. RepositoryDetailActivity.kt
package com.example.githubrepo

import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.example.githubrepo.databinding.ActivityRepositoryDetailBinding
import com.example.githubrepo.model.Repository

class RepositoryDetailActivity : AppCompatActivity() {

    private lateinit var binding: ActivityRepositoryDetailBinding

    companion object {
        private const val EXTRA_REPOSITORY = "repository"

        fun newIntent(context: Context, repository: Repository): Intent {
            val intent = Intent(context, RepositoryDetailActivity::class.java)
            intent.putExtra(EXTRA_REPOSITORY, repository)
            return intent
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityRepositoryDetailBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val repository: Repository = intent.getParcelableExtra(EXTRA_REPOSITORY)!!

        binding.repoName.text = repository.name
        binding.repoDescription.text = repository.description
        binding.repoLanguage.text = repository.language ?: "N/A"
        binding.repoStars.text = "Stars: ${repository.stars}"
        binding.repoForks.text = "Forks: ${repository.forks}"
    }
}
6. pagination/EndlessRecyclerViewScrollListener.kt
package com.example.githubrepo.pagination

import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

abstract class EndlessRecyclerViewScrollListener(private val layoutManager: LinearLayoutManager) : RecyclerView.OnScrollListener() {

    override fun onScrolled(view: RecyclerView, dx: Int, dy: Int) {
        if (dy <= 0) return

        val visibleItemCount = layoutManager.childCount
        val totalItemCount = layoutManager.itemCount
        val firstVisibleItemPosition = layoutManager.findFirstVisibleItemPosition()

        if (visibleItemCount + firstVisibleItemPosition >= totalItemCount && firstVisibleItemPosition >= 0) {
            val page = totalItemCount / visibleItemCount + 1
            onLoadMore(page, totalItemCount)
        }
    }

    abstract fun onLoadMore(page: Int, totalItemsCount: Int)
}
7.AndroidManifest.xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.githubrepo">
    
    <application
        android:allowBackup="true"
        android:label="@string/app_name

